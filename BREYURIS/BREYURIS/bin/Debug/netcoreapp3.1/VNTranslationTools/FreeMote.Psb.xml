<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeMote.Psb</name>
    </assembly>
    <members>
        <member name="M:FreeMote.Plugins.ManagedTlgFormatter.LoadTlg(System.Byte[],System.Int32@)">
            <summary>
            Load TLG
            </summary>
            <param name="tlgData"></param>
            <param name="version">TLG version, can be 0(unknown),5,6</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.ManagedTlgFormatter.SaveTlg(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Save TLG
            </summary>
            <param name="bmp"></param>
            <param name="tlg6">true: Save as TLG6; false: Save as TLG5</param>
            <returns></returns>
        </member>
        <member name="T:FreeMote.Plugins.FreeMount">
            <summary>
            FreeMote Plugin System
            </summary>
        </member>
        <member name="P:FreeMote.Plugins.FreeMount.PluginsCount">
            <summary>
            Loaded Plugins count
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.AddDefaultCatalogs(System.ComponentModel.Composition.Hosting.AggregateCatalog)">
            <summary>
            Add inherit plugins
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.Init(System.String)">
            <summary>
            Init Plugins
            <para>Must be called before using FreeMount features</para>
            <param name="path">Base path to find plugins</param>
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.Free">
            <summary>
            Dispose Plugins
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.PrintPluginInfos(System.Int32)">
            <summary>
            Print Plugin infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.InitPlugins(System.String)">
            <summary>
            Find plugin DLLs and init
            </summary>
            <param name="path">Base path to find plugins</param>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.ResourceToBitmap(System.String,System.Byte[]@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.IPsbImageFormatter.ToBitmap(System.Byte[]@,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="ext"></param>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.ArchDataToWave(System.String,FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.IPsbAudioFormatter.ToWave(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="ext"></param>
            <param name="metadata"></param>
            <param name="archData"></param>
            <param name="fileName">desired output file name hint (used to determine channel/pan)</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.BitmapToResource(System.String,System.Drawing.Bitmap,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.IPsbImageFormatter.ToBytes(System.Drawing.Bitmap,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="ext"></param>
            <param name="bitmap"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.WaveToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Byte[],System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.IPsbAudioFormatter.ToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.Byte[]@,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="md"></param>
            <param name="archData"></param>
            <param name="ext"></param>
            <param name="wave"></param>
            <param name="fileName"></param>
            <param name="waveExt"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMount.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.IPsbAudioFormatter.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="psb"></param>
            <param name="channel"><inheritdoc cref="M:FreeMote.Plugins.IPsbAudioFormatter.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})"/></param>
            <param name="archData"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.ArchDataToWave(System.String,FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String)">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.FreeMount.ArchDataToWave(System.String,FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="ext"></param>
            <param name="metadata"></param>
            <param name="archData"></param>
            <param name="fileName">desired output file name hint (used to determine channel/pan)</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.WaveToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Byte[]@,System.String,System.String)">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.FreeMount.WaveToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Byte[],System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="ext"></param>
            <param name="wave"></param>
            <param name="fileName"></param>
            <param name="waveExt">"ext" in ArchData</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@)">
            <summary>
            <inheritdoc cref="M:FreeMote.Plugins.FreeMount.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="md"></param>
            <param name="channel"><inheritdoc cref="M:FreeMote.Plugins.FreeMount.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})"/></param>
            <param name="archData"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.ResourceToBitmap(System.String,System.Byte[]@)">
            <summary>
            Use plugins to convert resource bytes to bitmap
            </summary>
            <param name="ext"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.BitmapToResource(System.String,System.Drawing.Bitmap)">
            <summary>
            Use plugins to convert bitmap to resource bytes
            </summary>
            <param name="ext"></param>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.OpenFromShell(System.IO.Stream,System.String@)">
            <summary>
            [RequireUsing] Use plugins to decompress shell types to PSB
            </summary>
            <param name="stream">the input stream won't be disposed automatically</param>
            <param name="type"></param>
            <returns>unpacked stream, remember to dispose!</returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.PackToShell(System.IO.Stream,System.String)">
            <summary>
            [RequireUsing] Use plugins to compress PSB to shell type
            </summary>
            <param name="input">The input stream. Might be disposed!</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.GetKey(System.IO.Stream)">
            <summary>
            Use plugin to try to get PSB key
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.FreeMountContext.OpenStreamFromPsbFile(System.String)">
            <summary>
            [RequireUsing] Open stream from PSB file, unpack the shell if exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:FreeMote.Plugins.IPsbAudioFormatter">
            <summary>
            Handle audio conversion
            </summary>
        </member>
        <member name="P:FreeMote.Plugins.IPsbAudioFormatter.Extensions">
            <summary>
            Target Extension (if have) e.g. ".wav"
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.IPsbAudioFormatter.CanToWave(FreeMote.Psb.IArchData,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if <see cref="M:FreeMote.Plugins.IPsbAudioFormatter.ToWave(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/> is available
            </summary>
            <param name="archData"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbAudioFormatter.CanToArchData(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if <see cref="M:FreeMote.Plugins.IPsbAudioFormatter.ToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.Byte[]@,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/> is available
            </summary>
            <param name="wave"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbAudioFormatter.ToWave(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Convert <see cref="T:FreeMote.Psb.IArchData"/> to wave bytes
            </summary>
            <param name="md"></param>
            <param name="archData"></param>
            <param name="fileName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbAudioFormatter.ToArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.Byte[]@,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Convert wave bytes to <see cref="T:FreeMote.Psb.IArchData"/>
            </summary>
            <param name="md"></param>
            <param name="archData">the archData to be filled</param>
            <param name="wave"></param>
            <param name="fileName"></param>
            <param name="waveExt"></param>
            <param name="context"></param>
            <returns>true if filled.</returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbAudioFormatter.TryGetArchData(FreeMote.Psb.AudioMetadata,FreeMote.Psb.PsbDictionary,FreeMote.Psb.IArchData@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used when collecting audio resource, the data could be null when compiling
            </summary>
            <param name="md"><see cref="P:FreeMote.Psb.AudioMetadata.ChannelList"/> is still null at this time</param>
            <param name="channel">an object in [channelList]</param>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:FreeMote.Plugins.IPsbImageFormatter.Extensions">
            <summary>
            Target Extension (if have) e.g. ".png"
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.IPsbImageFormatter.CanToBitmap(System.Byte[]@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if <see cref="M:FreeMote.Plugins.IPsbImageFormatter.ToBitmap(System.Byte[]@,System.Collections.Generic.Dictionary{System.String,System.Object})"/> is available
            </summary>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbImageFormatter.CanToBytes(System.Drawing.Bitmap,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if <see cref="M:FreeMote.Plugins.IPsbImageFormatter.ToBytes(System.Drawing.Bitmap,System.Collections.Generic.Dictionary{System.String,System.Object})"/> is available
            </summary>
            <param name="bitmap"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbImageFormatter.ToBitmap(System.Byte[]@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Convert image bytes to <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Plugins.IPsbImageFormatter.ToBytes(System.Drawing.Bitmap,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Convert <see cref="T:System.Drawing.Bitmap"/> to image bytes
            </summary>
            <param name="bitmap"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreeMote.Plugins.IPsbKeyProvider">
            <summary>
            Get PSB CryptKey
            </summary>
        </member>
        <member name="M:FreeMote.Plugins.IPsbKeyProvider.GetKey(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Try to get PSB key, do not lift the stream position
            </summary>
            <param name="stream"></param>
            <param name="context"></param>
            <returns>null if no key detected; otherwise give the key</returns>
        </member>
        <member name="P:FreeMote.Plugins.IPsbPluginInfo.Name">
            <summary>
            Plugin Name
            </summary>
        </member>
        <member name="P:FreeMote.Plugins.IPsbPluginInfo.Author">
            <summary>
            Plugin Author
            </summary>
        </member>
        <member name="P:FreeMote.Plugins.IPsbPluginInfo.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:FreeMote.Plugins.IPsbShell.Signature">
            <summary>
            If no signature, <see cref="T:FreeMote.Plugins.IPsbShell"/> should set it to null, use <see cref="M:FreeMote.Plugins.IPsbShell.IsInShell(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Object})"/> instead
            </summary>
        </member>
        <member name="M:FreeMote.Psb.WavArchData.ReadFromWav(System.IO.Stream)">
            <summary>
            This will close the stream
            </summary>
            <param name="ms"></param>
        </member>
        <member name="T:FreeMote.Psb.XwmaArchData">
            <summary>
            XWMA
            </summary>
        </member>
        <member name="M:FreeMote.Psb.XwmaArchData.ReadFromXwma(System.IO.Stream)">
            <summary>
            This will close the stream
            </summary>
            <param name="ms"></param>
        </member>
        <member name="T:FreeMote.Psb.ChannelClip">
            <summary>
            Clip (parts of a channel) used in NX OPUS
            </summary>
        </member>
        <member name="T:FreeMote.Psb.AdpcmArchData">
            <summary>
            NX ADPCM
            </summary>
        </member>
        <member name="T:FreeMote.Psb.OpusArchData">
            <summary>
            NX OPUS (one channel may have 2 resource)
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsArchData">
            <summary>
            PS Base (VAG / AT9)
            </summary>
        </member>
        <member name="T:FreeMote.Psb.AudioMetadata">
            <summary>
            Information for Audio Resource
            </summary>
        </member>
        <member name="P:FreeMote.Psb.AudioMetadata.FileString">
            <summary>
            File
            </summary>
        </member>
        <member name="M:FreeMote.Psb.AudioMetadata.Link(System.String,FreeMote.Plugins.FreeMountContext)">
            <summary>
            Link an audio file into PSB
            <para>Have special handling for multiple channels</para>
            </summary>
            <param name="fullPath"></param>
            <param name="context"></param>
        </member>
        <member name="M:FreeMote.Psb.AudioMetadata.LoadFileToChannel(FreeMote.Psb.IArchData,System.String,System.String,System.String,System.String,FreeMote.Plugins.FreeMountContext)">
            <summary>
            Load a common audio file into a channel
            </summary>
            <param name="channel">target channel</param>
            <param name="fullPath">path to load audio file</param>
            <param name="fileName">used in some audio types to keep file name</param>
            <param name="fileExt">common audio extension like "wav"</param>
            <param name="encodeExt">encode audio extension like "vag"</param>
            <param name="context"></param>
        </member>
        <member name="M:FreeMote.Psb.AudioMetadata.GetFileName(System.String)">
            <summary>
            Get Audio FileName for save
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="P:FreeMote.Psb.IPsbType.PsbType">
            <summary>
            PSB type
            </summary>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.IsThisType(FreeMote.Psb.PSB)">
            <summary>
            Check if <paramref name="psb"/> is this type
            </summary>
            <param name="psb"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.CollectResources``1(FreeMote.Psb.PSB,System.Boolean)">
            <summary>
            Collect Resources
            </summary>
            <param name="psb"></param>
            <param name="deDuplication"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.Link(FreeMote.Psb.PSB,FreeMote.Plugins.FreeMountContext,System.Collections.Generic.IList{System.String},System.String,FreeMote.Psb.PsbLinkOrderBy)">
            <summary>
            Link
            </summary>
            <param name="psb"></param>
            <param name="context"></param>
            <param name="resPaths">(legacy) res.json style resource list</param>
            <param name="baseDir"></param>
            <param name="order"></param>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.Link(FreeMote.Psb.PSB,FreeMote.Plugins.FreeMountContext,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Link
            </summary>
            <param name="psb"></param>
            <param name="context"></param>
            <param name="resPaths"></param>
            <param name="baseDir"></param>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.UnlinkToFile(FreeMote.Psb.PSB,FreeMote.Plugins.FreeMountContext,System.String,System.String,System.Boolean,FreeMote.Psb.PsbLinkOrderBy)">
            <summary>
            Unlink to file
            </summary>
            <param name="psb"></param>
            <param name="context"></param>
            <param name="name">resource folder name, could be PSB name itself, or with `-resource` suffix</param>
            <param name="dirPath">resource folder path</param>
            <param name="outputUnlinkedPsb">whether to save the PSB without texture</param>
            <param name="order"></param>
            <returns>unlinked PSB path</returns>
        </member>
        <member name="M:FreeMote.Psb.IPsbType.OutputResources(FreeMote.Psb.PSB,FreeMote.Plugins.FreeMountContext,System.String,System.String,FreeMote.PsbExtractOption)">
            <summary>
            Output resources
            </summary>
            <param name="psb"></param>
            <param name="context"></param>
            <param name="name">resource folder name, could be PSB name itself, or with `-resource` suffix</param>
            <param name="dirPath">resource folder path</param>
            <param name="extractOption"></param>
            <returns>(FileName, RelativePath)</returns>
        </member>
        <member name="T:FreeMote.Psb.PSB">
            <summary>
            Packaged Struct Binary
            </summary>
            Photo Shop Big
            Pretty SB
        </member>
        <member name="P:FreeMote.Psb.PSB.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Names">
            <summary>
            Names
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Strings">
            <summary>
            Strings
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Resources">
            <summary>
            Resource Chunk
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PSB.ExtraChunkOffsets">
            <summary>
            Extra Resource Chunk
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.ExtraResources">
            <summary>
            Extra Resources
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Objects">
            <summary>
            Objects (Entries)
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.TypeHandler">
            <summary>
            Type specific handler
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PSB.Platform">
            <summary>
            PSB Target Platform (Spec)
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PSB.InferType">
            <summary>
            Infer PSB Type
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FreeMote.Psb.PSB.AfterLoad" -->
        <member name="M:FreeMote.Psb.PSB.LoadNames">
            <summary>
            Load a B Tree
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PSB.Unpack(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Unpack PSB Value
            </summary>
            <param name="br"></param>
            <param name="lazyLoad">for zero-knowledge reading</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.LoadObjects(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Load a dictionary, won't ensure stream Position unless use <paramref name="lazyLoad"/>
            </summary>
            <param name="br"></param>
            <param name="lazyLoad">whether to lift stream Position to dictionary end</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.LoadList(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Load a list, won't ensure stream Position unless use <paramref name="lazyLoad"/>
            </summary>
            <param name="br"></param>
            <param name="lazyLoad">whether to lift stream Position</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.LoadResource(FreeMote.Psb.PsbResource,System.IO.BinaryReader)">
            <summary>
            Load a resource content based on index, lift stream Position
            </summary>
            <param name="res"></param>
            <param name="br"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.LoadExtraResource(FreeMote.Psb.PsbResource,System.IO.BinaryReader)">
            <summary>
            Load an extra resource content based on index, lift stream Position
            </summary>
            <param name="res"></param>
            <param name="br"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.LoadString(FreeMote.Psb.PsbString@,System.IO.BinaryReader)">
            <summary>
            Load a string based on index, lift stream Position
            </summary>
            <param name="str"></param>
            <param name="br"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.Collect(System.Boolean,System.Boolean)">
            <summary>
            Fill fields based on <see cref="P:FreeMote.Psb.PSB.Objects"/>
            </summary>
            <param name="mergeString"></param>
            <param name="mergeRes">Whether to merge resources with exact same data. Be careful!</param>
        </member>
        <member name="M:FreeMote.Psb.PSB.Merge(System.Boolean)">
            <summary>
            Update fields and indexes based on <see cref="P:FreeMote.Psb.PSB.Objects"/>
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PSB.Build">
            <summary>
            Build PSB
            <para>Make sure you have called <see cref="M:FreeMote.Psb.PSB.Merge(System.Boolean)"/> or the output can be invalid.</para>
            </summary>
            <remarks>Why FreeMote do not call <see cref="M:FreeMote.Psb.PSB.Merge(System.Boolean)"/> by default? Because Merge is a strict string merge method which will merge any redundant string. If you have to keep two same strings from merged into one, you can write your own Merge method.</remarks>
            <returns>Binary</returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.BuildToFile(System.String)">
            <summary>
            Build PSB to file
            <para>Make sure you have called <see cref="M:FreeMote.Psb.PSB.Merge(System.Boolean)"/> or the output can be invalid.</para>
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.ToStream">
            <summary>
            Build as <see cref="T:System.IO.MemoryStream"/>, make sure you have called <see cref="M:FreeMote.Psb.PSB.Merge(System.Boolean)"/> before.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.DataAlign(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Perform (16) byte data align
            </summary>
            <param name="bw"></param>
            <param name="align">by default it should be 16</param>
            <returns>padded length</returns>
        </member>
        <member name="M:FreeMote.Psb.PSB.SaveCollection(System.IO.BinaryWriter,FreeMote.Psb.PsbList)">
            <summary>
            Save a List
            </summary>
            <param name="bw"></param>
            <param name="pCol"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.SaveRawResources(System.String)">
            <summary>
            Export all resources
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.DullahanLoad(System.String,System.Int32)">
            <summary>
            Try skip header and load. May (not) work on any PSB only if body is not encrypted
            <para>Can not use <see cref="P:FreeMote.Consts.InMemoryLoading"/> so it will be slow.</para>
            <remarks>DuRaRaRa!!</remarks>
            </summary>
            <param name="path"></param>
            <param name="detectSize"></param>
        </member>
        <member name="M:FreeMote.Psb.PSB.DullahanLoad(System.IO.Stream,System.Int32)">
            <summary>
            Try skip header and load
            <para>May (not) work on any PSB only if body is not encrypted</para>
            <remarks>DuRaRaRa!!</remarks>
            </summary>
            <param name="stream"></param>
            <param name="detectSize"></param>
        </member>
        <member name="T:FreeMote.Psb.PsbLinkOrderBy">
            <summary>
            Texture Link Order
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbLinkOrderBy.Convention">
            <summary>
            The image name should be FreeMote style: {part}-{name}.{ext}
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbLinkOrderBy.Name">
            <summary>
            The image name should be EMT Editor style: {name}_tex#{no:D3}.{ext}
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbLinkOrderBy.Order">
            <summary>
            The order in list matters
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbCompressType">
            <summary>
            Compression in PSB
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.None">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.RL">
            <summary>
            RLE
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.Bmp">
            <summary>
            Raw Bitmap
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.Tlg">
            <summary>
            KRKR TLG
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.Astc">
            <summary>
            ASTC
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbCompressType.ByName">
            <summary>
            By extension
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.CompressType(FreeMote.PsbSpec)">
            <summary>
            If this spec uses RL
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ToExtensionString(FreeMote.Psb.PsbCompressType)">
            <summary>
            <paramref name="compress"/> to its file extension
            </summary>
            <param name="compress"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.FixMotionMetadata(FreeMote.Psb.PSB)">
            <summary>
            Fix [metadata/base/motion] missing issue for <seealso cref="F:FreeMote.PsbType.Motion"/> PSB 
            </summary>
            <param name="psb"></param>
            <returns>Whether the PSB is confirmed to be fine already or fine after fixed</returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.TryGetCanvasSize(FreeMote.Psb.PSB,System.Int32@,System.Int32@)">
            <summary>
            Try to measure EMT PSB Canvas Size
            </summary>
            <param name="psb"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns>True: The canvas size can be measured; False: can not get canvas size</returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetName(FreeMote.Psb.IPsbChild)">
            <summary>
            Get name in <see cref="T:FreeMote.Psb.PsbDictionary"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetName(FreeMote.Psb.IPsbSingleton,FreeMote.Psb.PsbDictionary)">
            <summary>
            Get name
            </summary>
            <param name="c"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.SetPsbArchData(FreeMote.Psb.IArchData,FreeMote.Psb.IPsbValue)">
            <summary>
            Set archData value to archData object
            </summary>
            <param name="archData"></param>
            <param name="val"></param>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.Children(FreeMote.Psb.IPsbValue,System.String)">
            <summary>
            Quickly fetch children (use at your own risk)
            </summary>
            <param name="col"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetInt(FreeMote.Psb.IPsbValue)">
            <summary>
            Quickly fetch number (use at your own risk)
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetFloat(FreeMote.Psb.IPsbValue)">
            <summary>
            Quickly fetch number (use at your own risk)
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetDouble(FreeMote.Psb.IPsbValue)">
            <summary>
            Quickly fetch number (use at your own risk)
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.Children(FreeMote.Psb.IPsbValue,System.Int32)">
            <summary>
            Quickly fetch children (use at your own risk)
            </summary>
            <param name="col"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.FindByPath(FreeMote.Psb.PsbDictionary,System.String)">
            <summary>
            Find object by path (use index [n] for collection)
            <example>e.g. "/object/all_parts/motion/全体構造/layer/[0]"</example>
            </summary>
            <param name="psbObj"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.FindByPath(FreeMote.Psb.PsbList,System.String)">
            <inheritdoc cref="M:FreeMote.Psb.PsbExtension.FindByPath(FreeMote.Psb.PsbDictionary,System.String)"/>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.FindByMmoPath(FreeMote.Psb.IPsbCollection,System.String)">
            <summary>
            Find object by MMO style path (based on label)
            <example>e.g. "all_parts/全体構造/■全体レイアウト"</example>
            </summary> 
            <param name="psbObj"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetMmoPath(FreeMote.Psb.IPsbChild)">
            <summary>
            Get MMO style path (based on label)
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.SaveAsMdfFile(FreeMote.Psb.PSB,System.String,System.Nullable{System.UInt32})">
            <summary>
            Save PSB as pure MDF file
            </summary>
            <remarks>can not save as impure MDF (such as MT19937 MDF)</remarks>
            <param name="psb"></param>
            <param name="path"></param>
            <param name="key"></param>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.SaveAsMdf(FreeMote.Psb.PSB,System.Nullable{System.UInt32})">
            <summary>
            Save as pure MDF
            </summary>
            <param name="psb"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ByteSpanEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Fast compare byte array
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.IsFinite(System.Single)">
            <summary>
            Check if number is not NaN
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.IsFinite(System.Double)">
            <summary>
            Check if number is not NaN
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetSize(System.Int32)">
            <summary>
            Black magic to get size hehehe...
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetSize(System.UInt32)">
            <summary>
            Black magic to get size hehehe...
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetSize(System.Int64)">
            <summary>
            Black magic... hehehe...
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ZipNumberBytes(System.Int32,System.Int32)">
            <summary>
            Shorten number bytes
            </summary>
            <param name="i"></param>
            <param name="size">Fix size</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ZipNumberBytes(System.Int64,System.Int32)">
            <summary>
            Shorten number bytes
            </summary>
            <param name="i"></param>
            <param name="size">Fix size</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ZipNumberBytes(System.UInt32,System.Int32)">
            <summary>
            Shorten number bytes
            </summary>
            <param name="i"></param>
            <param name="size">Fix size</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ArchiveInfoGetFileNameRemoveSuffix(System.String,System.String)">
            <summary>
            Remove suffix for file name in archive info file_info
            </summary>
            <param name="fileName"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ArchiveInfoGetFileNameAppendSuffix(System.String,System.String)">
            <summary>
            Append suffix for file name in archive info file_info
            </summary>
            <param name="name"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ArchiveInfoCollectFiles(FreeMote.Psb.PSB,System.String)">
            <summary>
            Collect file names in archive info file_info
            </summary>
            <param name="psb"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ArchiveInfoGetSuffix(FreeMote.Psb.PSB)">
            <summary>
            Get suffix in archive info
            </summary>
            <param name="psb"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.ArchiveInfoGetPackageName(System.String)">
            <summary>
            Get package name from a string like {package name}_info.psb.m
            </summary>
            <param name="fileName">e.g. {package name}_info.psb.m</param>
            <returns>{package name}, can be null if failed</returns>
        </member>
        <member name="M:FreeMote.Psb.PsbExtension.GetSecondExtension(System.String)">
            <summary>
            Get the second file name extension.
            <example>e.g. get ".vag" from "audio.vag.wav"</example>
            </summary>
            <param name="path"></param>
            <returns>null if input is null; <see cref="F:System.String.Empty"/> if no second extension</returns>
        </member>
        <member name="T:FreeMote.Psb.PsbPainter">
            <summary>
            EMT PSB Painter
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbPainter.UpdateResource">
            <summary>
            Gather resources for painting
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbPainter.Draw(System.Int32,System.Int32)">
            <summary>
            Render the model to an image
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbPainter.CollectResource">
            <summary>
            Collect paint-able resources
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.ParseLoopStr(System.String)">
            <summary>
            Parse loopstr like "range:0,123456" to a <see cref="T:FreeMote.Psb.PsbList"/>
            </summary>
            <param name="loopStr"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.TryToWave(FreeMote.Psb.IArchData,FreeMote.Psb.AudioMetadata,FreeMote.Plugins.FreeMountContext,System.String)">
            <summary>
            Convert <see cref="T:FreeMote.Psb.IArchData"/> to Wave
            </summary>
            <param name="archData"></param>
            <param name="metadata"></param>
            <param name="fileName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.CollectResources``1(FreeMote.Psb.PSB,System.Boolean)">
            <summary>
            Get all resources with necessary info
            </summary>
            <param name="psb"></param>
            <param name="deDuplication">if true, we focus on Resource itself </param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.UnlinkImages(FreeMote.Psb.PSB,FreeMote.Psb.PsbLinkOrderBy,System.Boolean)">
            <summary>
            Inlined PSB -> External Texture PSB. Inverse of Link
            </summary>
            <param name="psb"></param>
            <param name="order">To make a regular external texture PSB you should set it to <see cref="F:FreeMote.Psb.PsbLinkOrderBy.Name"/>.</param>
            <param name="disposeResInPsb">Whether to remove resources in PSB. To make a real external texture PSB you should set it to true.</param>
            <returns>Ordered textures</returns>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.GenerateImageMetadata(FreeMote.Psb.PsbDictionary,FreeMote.Psb.PsbResource,System.Boolean)">
            <summary>
            Extract resource info
            </summary>
            <param name="d">PsbObject which contains "pixel"</param>
            <param name="r">Resource</param>
            <param name="duplicatePalette">When set to true, Pal.Data may not be set!</param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.PsbResHelper.GetPartName(FreeMote.Psb.IPsbChild)">
            <summary>
            Get related name on depth 3 (not a common method)
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:FreeMote.Psb.IPsbChild">
            <summary>
            Contained by a <see cref="T:FreeMote.Psb.IPsbCollection"/>
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IPsbChild.Parent">
            <summary>
            <see cref="T:FreeMote.Psb.IPsbCollection"/> which contain this
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IPsbSingleton">
            <summary>
            Contained by more than one <see cref="T:FreeMote.Psb.IPsbCollection"/>
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IPsbSingleton.Parents">
            <summary>
            <see cref="T:FreeMote.Psb.IPsbCollection"/>s which contain this
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IPsbCollection">
            <summary>
            List or Dictionary
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IPsbWrite">
            <summary>
            Directly write as bytes
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IPsbIndexed">
            <summary>
            Tracked by index
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IPsbValue">
            <summary>
            PSB Entry
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbNull">
            <summary>
            Null: Reference type
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbNull.#ctor">
            <summary>
            Use <see cref="F:FreeMote.Psb.PsbNull.Null"/> to avoid duplicated null
            </summary>
        </member>
        <member name="F:FreeMote.Psb.PsbNull.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbBool">
            <summary>
            Bool: Value type
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbNumber">
            <summary>
            Number: Value type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PsbNumber.Zero">
            <summary>
            PsbNumber: (int) 0
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbNumber.#ctor(System.Int32)">
            <summary>
            Int Number
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:FreeMote.Psb.PsbNumber.#ctor(System.Single)">
            <summary>
            Float Number
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:FreeMote.Psb.PsbNumber.#ctor(System.Double)">
            <summary>
            Double Number
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:FreeMote.Psb.PsbNumber.#ctor(System.UInt32)">
            <summary>
            UInt Number (only used in Compiler)
            </summary>
            <param name="val"></param>
        </member>
        <member name="P:FreeMote.Psb.PsbNumber.AsInt">
            <summary>
            When set, change number type to Int
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbArray">
            <summary>
            uint[]: Value type
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbArrayDetector">
            <summary>
            Detect if byte segment is a <see cref="T:FreeMote.Psb.PsbArray"/>
            </summary>
        </member>
        <member name="M:FreeMote.Psb.PsbArrayDetector.IsPsbArrayType(System.Byte,System.Int32)">
            <summary>
            Check if this byte is a PsbArray type byte
            </summary>
            <param name="b"></param>
            <param name="maxSize">max ArrayN allowed</param>
            <returns></returns>
        </member>
        <member name="P:FreeMote.Psb.PsbArrayDetector.First">
            <summary>
            First Element
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbString">
            <summary>
            String: Reference type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PsbString.Empty">
            <summary>
            new empty PsbString ""
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PsbString.Index">
            <summary>
            Update index when compile
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PsbString.Type">
            <summary>
            It's based on index...
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbDictionary">
            <summary>
            psb_objects_t: {key: value}
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbList">
            <summary>
            [value1, value2...]
            </summary>
        </member>
        <member name="T:FreeMote.Psb.PsbResource">
            <summary>
            Resource: Reference type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.PsbResource.Index">
            <summary>
            Update index when compile
            </summary>
        </member>
        <member name="T:FreeMote.Psb.FlattenArrayMetadata">
            <summary>
            Information about FlattenArray such as rawMeshList
            </summary>
        </member>
        <member name="T:FreeMote.Psb.IArchData">
            <summary>
            Audio Arch Data (usually a Channel)
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IArchData.Extension">
            <summary>
            Unusual audio extension, such as .vag (must start with dot)
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IArchData.WaveExtension">
            <summary>
            Common wave type after decode, usually .wav (must start with dot)
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IArchData.Data">
            <summary>
            key "data" in PSB
            </summary>
        </member>
        <member name="P:FreeMote.Psb.IArchData.PsbArchData">
            <summary>
            PSB object "archData" value
            </summary>
        </member>
        <member name="M:FreeMote.Psb.IArchData.ToPsbArchData">
            <summary>
            Generate PSB object "archData" value
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeMote.Psb.ImageMetadata">
            <summary>
            Information for Image Resource
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Part">
            <summary>
            Name 1
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Name">
            <summary>
            Name 2
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Index">
            <summary>
            Index is a value for tracking resource when compiling. For index appeared in texture name, see <seealso cref="P:FreeMote.Psb.ImageMetadata.TextureIndex"/>
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.TextureIndex">
            <summary>
            The texture index
            <code>"tex#001".TextureIndex = 1; "tex".Index = 0</code>
            </summary>
        </member>
        <member name="M:FreeMote.Psb.ImageMetadata.GetTextureIndex(System.String)">
            <summary>
            The texture index. e.g.
            <code>GetTextureIndex("tex#001") = 1</code>
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Top">
            <summary>
            [Type2]
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Left">
            <summary>
            [Type2]
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Type">
            <summary>
            Pixel Format Type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Palette">
            <summary>
            Pal
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.PalType">
            <summary>
            Palette Pixel Format Type
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.ZIndex">
            <summary>
            Additional z-index info
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Label">
            <summary>
            The Label which this resource belongs to
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.MotionName">
            <summary>
            Name under object/{part}/motion/
            </summary>
        </member>
        <member name="P:FreeMote.Psb.ImageMetadata.Spec">
            <summary>
            Platform
            <para>Spec can not be get from source part, so set it before use</para>
            </summary>
        </member>
        <member name="M:FreeMote.Psb.ImageMetadata.Validate">
            <summary>
            Check if the <see cref="P:FreeMote.Psb.ImageMetadata.Data"/> looks correct
            </summary>
            <returns>Whether check is ok, and error message</returns>
        </member>
        <member name="M:FreeMote.Psb.ImageMetadata.Link(System.String,FreeMote.Plugins.FreeMountContext)">
            <summary>
            Load <see cref="P:FreeMote.Psb.ImageMetadata.Data"/> and <see cref="P:FreeMote.Psb.ImageMetadata.PalData"/> from image file
            </summary>
            <param name="fullPath"></param>
            <param name="context"></param>
        </member>
        <member name="M:FreeMote.Psb.ImageMetadata.ToImage">
            <summary>
            Convert Resource to Image
            <para>Only works if <see cref="P:FreeMote.Psb.ImageMetadata.Resource"/>.Data is not null</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.ImageMetadata.SetData(System.Drawing.Bitmap)">
            <summary>
            Set Image to <see cref="P:FreeMote.Psb.PsbResource.Data"/>
            <para>(in memory version of <seealso cref="M:FreeMote.Psb.ImageMetadata.Link(System.String,FreeMote.Plugins.FreeMountContext)"/>)</para>
            </summary>
            <param name="bmp"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FreeMote.Psb.ImageMetadata.GetFriendlyName(FreeMote.PsbType)" -->
        <member name="M:FreeMote.Psb.Types.MotionType.MotionResourceInstrument(FreeMote.Psb.PSB)">
            <summary>
            Add stub <see cref="T:FreeMote.Psb.PsbResource"/> to this PSB
            </summary>
            <param name="psb"></param>
        </member>
        <member name="M:FreeMote.Psb.Types.MotionType.GenerateMotionResourceStubs(System.Collections.Generic.List{FreeMote.Psb.PsbResource},FreeMote.Psb.IPsbValue)">
            <summary>
            Add stubs (<see cref="T:FreeMote.Psb.PsbResource"/> with null Data) into a Motion PSB. A stub must be linked with a texture, or it will be null after <see cref="M:FreeMote.Psb.PSB.Build"/>
            </summary>
            <param name="resources"></param>
            <param name="obj"></param>
        </member>
        <member name="M:FreeMote.Psb.Types.SoundArchiveType.Link(FreeMote.Psb.PSB,FreeMote.Plugins.FreeMountContext,System.Collections.Generic.IList{System.String},System.String,FreeMote.Psb.PsbLinkOrderBy)">
            <summary>
            Link by old res.json, not used actually
            </summary>
            <param name="psb"></param>
            <param name="context"></param>
            <param name="resPaths"></param>
            <param name="baseDir"></param>
            <param name="order"></param>
        </member>
        <member name="M:FreeMote.Psb.Types.SoundArchiveType.SaveSubChannel(FreeMote.Psb.AudioMetadata,FreeMote.Psb.IArchData,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},FreeMote.Plugins.FreeMountContext)">
            <summary>
            Save sub channel
            </summary>
            <param name="resource"></param>
            <param name="archData"></param>
            <param name="secondExt"></param>
            <param name="baseDir"></param>
            <param name="psbName"></param>
            <param name="resDictionary"></param>
            <param name="context"></param>
            <returns>true if TryToWave succeed; false if raw data is saved</returns>
        </member>
        <member name="M:FreeMote.Psb.Textures.TextureCombiner.CombineTachie(FreeMote.Psb.PSB)">
            <summary>
            Combine Image texture parts 
            </summary>
            <param name="psb">Image (image) type PSB</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FreeMote.Psb.Textures.TextureEdgeProcess.Expand1Px" -->
        <member name="T:FreeMote.Psb.Textures.TextureInfo">
            <summary>
            Represents a Texture in an atlas
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TextureInfo.Source">
            <summary>
            Path of the source texture on disk
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TextureInfo.Width">
            <summary>
            Width in Pixels
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TextureInfo.Height">
            <summary>
            Height in Pixels
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TextureInfo.SourceImage">
            <summary>
            Source texture in memory
            </summary>
        </member>
        <member name="T:FreeMote.Psb.Textures.SplitType">
            <summary>
            Indicates in which direction to split an unused area when it gets used
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.SplitType.Horizontal">
            <summary>
            Split Horizontally (textures are stacked up)
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.SplitType.Vertical">
            <summary>
            Split verticaly (textures are side by side)
            </summary>
        </member>
        <member name="T:FreeMote.Psb.Textures.BestFitHeuristic">
            <summary>
            Different types of heuristics in how to use the available space
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.BestFitHeuristic.Area">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.BestFitHeuristic.MaxOneAxis">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeMote.Psb.Textures.Node">
            <summary>
            A node in the Atlas structure
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Node.Bounds">
            <summary>
            Bounds of this node in the atlas
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Node.Texture">
            <summary>
            Texture this node represents
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Node.SplitType">
            <summary>
            If this is an empty node, indicates how to split it when it will be used
            </summary>
        </member>
        <member name="T:FreeMote.Psb.Textures.Atlas">
            <summary>
            The texture atlas
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Atlas.Width">
            <summary>
            Width in pixels
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Atlas.Height">
            <summary>
            Height in Pixel
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.Atlas.Nodes">
            <summary>
            List of the nodes in the Atlas. This will represent all the textures that are packed into it and all the remaining free space
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.SourceTextures">
            <summary>
            List of all the textures that need to be packed
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.Log">
            <summary>
            Stream that recieves all the info logged
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.Error">
            <summary>
            Stream that recieves all the error info
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.Padding">
            <summary>
            Number of pixels that separate textures in the atlas
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.AtlasSize">
            <summary>
            Size of the atlas in pixels. Represents one axis, as atlases are square
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.DebugMode">
            <summary>
            Toggle for debug mode, resulting in debug atlasses to check the packing algorithm
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.ScrapbookMode">
            <summary>
            Toggle for Scrapbook mode - just paste all textures to same size
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.FitHeuristic">
            <summary>
            Which heuristic to use when doing the fit
            </summary>
        </member>
        <member name="F:FreeMote.Psb.Textures.TexturePacker.Atlasses">
            <summary>
            List of all the output atlases
            </summary>
        </member>
        <member name="M:FreeMote.Psb.Textures.TexturePacker.Process(System.Collections.Generic.IDictionary{System.String,System.Drawing.Image},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Result saved in <see cref="F:FreeMote.Psb.Textures.TexturePacker.Atlasses"/>
            </summary>
            <param name="images"></param>
            <param name="atlasSize"></param>
            <param name="padding"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:FreeMote.Psb.Textures.TextureSpliter.CollectSplitResources(FreeMote.Psb.PSB)">
            <summary>
            <see cref="M:FreeMote.Psb.PsbResHelper.CollectResources``1(FreeMote.Psb.PSB,System.Boolean)"/> for packed-texture specs, especially for <see cref="F:FreeMote.PsbSpec.win"/>
            </summary>
            <param name="psb"></param>
            <returns></returns>
        </member>
        <member name="M:FreeMote.Psb.Textures.TextureSpliter.SplitTextureToFiles(FreeMote.Psb.PSB,System.String,FreeMote.PsbExtractOption,FreeMote.PsbImageFormat,FreeMote.PsbPixelFormat)">
            <summary>
            Split textures into parts and save to files
            </summary>
            <param name="psb">PSB</param>
            <param name="path">Save directory</param>
            <param name="option">Save option</param>
            <param name="imageFormat">Save format</param>
            <param name="pixelFormat">When save to PSB special formats, specific pixel format to use</param>
        </member>
    </members>
</doc>
